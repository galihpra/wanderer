// Code generated by mockery v2.37.1. DO NOT EDIT.

package mocks

import (
	context "context"
	airlines "wanderer/features/airlines"

	filters "wanderer/helpers/filters"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Create provides a mock function with given fields: newAirline
func (_m *Service) Create(newAirline airlines.Airline) error {
	ret := _m.Called(newAirline)

	var r0 error
	if rf, ok := ret.Get(0).(func(airlines.Airline) error); ok {
		r0 = rf(newAirline)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *Service) Delete(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: flt
func (_m *Service) GetAll(flt filters.Filter) ([]airlines.Airline, error) {
	ret := _m.Called(flt)

	var r0 []airlines.Airline
	var r1 error
	if rf, ok := ret.Get(0).(func(filters.Filter) ([]airlines.Airline, error)); ok {
		return rf(flt)
	}
	if rf, ok := ret.Get(0).(func(filters.Filter) []airlines.Airline); ok {
		r0 = rf(flt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]airlines.Airline)
		}
	}

	if rf, ok := ret.Get(1).(func(filters.Filter) error); ok {
		r1 = rf(flt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Import provides a mock function with given fields: ctx, data
func (_m *Service) Import(ctx context.Context, data []airlines.Airline) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []airlines.Airline) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: id, updateAirline
func (_m *Service) Update(id uint, updateAirline airlines.Airline) error {
	ret := _m.Called(id, updateAirline)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, airlines.Airline) error); ok {
		r0 = rf(id, updateAirline)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
