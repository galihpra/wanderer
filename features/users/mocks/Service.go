// Code generated by mockery v2.37.1. DO NOT EDIT.

package mocks

import (
	users "wanderer/features/users"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *Service) Delete(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Detail provides a mock function with given fields: id
func (_m *Service) Detail(id uint) (*users.User, error) {
	ret := _m.Called(id)

	var r0 *users.User
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*users.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *users.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.User)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: email, password
func (_m *Service) Login(email string, password string) (*users.User, error) {
	ret := _m.Called(email, password)

	var r0 *users.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*users.User, error)); ok {
		return rf(email, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) *users.User); ok {
		r0 = rf(email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: newUser
func (_m *Service) Register(newUser users.User) error {
	ret := _m.Called(newUser)

	var r0 error
	if rf, ok := ret.Get(0).(func(users.User) error); ok {
		r0 = rf(newUser)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: id, updateUser
func (_m *Service) Update(id uint, updateUser users.User) error {
	ret := _m.Called(id, updateUser)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, users.User) error); ok {
		r0 = rf(id, updateUser)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
